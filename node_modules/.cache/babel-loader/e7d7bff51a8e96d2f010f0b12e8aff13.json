{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDc_jwkxS90LvcFvlxn56Az9CsV1SdmbZk',\n  authDomain: 'crwn-clothing-db-f699d.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f699d',\n  storageBucket: 'crwn-clothing-db-f699d.appspot.com',\n  messagingSenderId: '344036926244',\n  appId: '1:344036926244:web:5df3326ea98b87091dc9b1'\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n}; // Initialize Firebase\n// const firebaseApp = initializeApp(firebaseConfig);\n// const googleProvider = new GoogleAuthProvider();\n// googleProvider.setCustomParameters({\n//   prompt: 'select_account',\n// });\n// export const auth = getAuth();\n// export const signInWithGooglePopup = () =>\n//   signInWithPopup(auth, googleProvider);\n// export const signInWithGoogleRedirect = () =>\n//   signInWithRedirect(auth, googleProvider);\n// export const db = getFirestore();\n// export const createUserDocumentFromAuth = async (\n//   userAuth,\n//   additionalInformation\n// ) => {\n//   if (!userAuth) return;\n//   const userDocRef = doc(db, 'users', userAuth.uid);\n//   console.log(userDocRef);\n//   const userSnapshot = await getDoc(userDocRef);\n//   console.log(userSnapshot);\n//   console.log(userSnapshot.exists());\n//   if (!userSnapshot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await setDoc(userDocRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalInformation,\n//       });\n//     } catch (error) {\n//       console.log('error creating the user', error.message);\n//     }\n//   }\n//   return userDocRef;\n// };\n// export const createAuthUserWithEmailAndPassword = async (email, password) => {\n//   if (!email || !password) return;\n//   return await createUserWithEmailAndPassword(auth, email, password);\n// };","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signInWithEmailAndPassword"],"sources":["/Users/georgebeard/Documents/Learning/React/crwn-clothing/src/utils/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\n\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from 'firebase/auth';\n\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDc_jwkxS90LvcFvlxn56Az9CsV1SdmbZk',\n  authDomain: 'crwn-clothing-db-f699d.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f699d',\n  storageBucket: 'crwn-clothing-db-f699d.appspot.com',\n  messagingSenderId: '344036926244',\n  appId: '1:344036926244:web:5df3326ea98b87091dc9b1',\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account',\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\n// Initialize Firebase\n// const firebaseApp = initializeApp(firebaseConfig);\n\n// const googleProvider = new GoogleAuthProvider();\n\n// googleProvider.setCustomParameters({\n//   prompt: 'select_account',\n// });\n\n// export const auth = getAuth();\n// export const signInWithGooglePopup = () =>\n//   signInWithPopup(auth, googleProvider);\n// export const signInWithGoogleRedirect = () =>\n//   signInWithRedirect(auth, googleProvider);\n\n// export const db = getFirestore();\n\n// export const createUserDocumentFromAuth = async (\n//   userAuth,\n//   additionalInformation\n// ) => {\n//   if (!userAuth) return;\n//   const userDocRef = doc(db, 'users', userAuth.uid);\n\n//   console.log(userDocRef);\n\n//   const userSnapshot = await getDoc(userDocRef);\n//   console.log(userSnapshot);\n//   console.log(userSnapshot.exists());\n\n//   if (!userSnapshot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n\n//     try {\n//       await setDoc(userDocRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalInformation,\n//       });\n//     } catch (error) {\n//       console.log('error creating the user', error.message);\n//     }\n//   }\n\n//   return userDocRef;\n// };\n\n// export const createAuthUserWithEmailAndPassword = async (email, password) => {\n//   if (!email || !password) return;\n\n//   return await createUserWithEmailAndPassword(auth, email, password);\n// };\n"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AAEA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,QAMO,eANP;AAQA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,wCAFS;EAGrBC,SAAS,EAAE,wBAHU;EAIrBC,aAAa,EAAE,oCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB;AASA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAD,CAAjC;AAEA,MAAMQ,cAAc,GAAG,IAAId,kBAAJ,EAAvB;AAEAc,cAAc,CAACC,mBAAf,CAAmC;EACjCC,MAAM,EAAE;AADyB,CAAnC;AAIA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAApB;AACP,OAAO,MAAMqB,qBAAqB,GAAG,MACnCnB,eAAe,CAACkB,IAAD,EAAOH,cAAP,CADV;AAEP,OAAO,MAAMK,wBAAwB,GAAG,MACtCrB,kBAAkB,CAACmB,IAAD,EAAOH,cAAP,CADb;AAGP,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAvB;AAEP,OAAO,MAAMmB,0BAA0B,GAAG,gBACxCC,QADwC,EAGrC;EAAA,IADHC,qBACG,uEADqB,EACrB;EACH,IAAI,CAACD,QAAL,EAAe;EAEf,MAAME,UAAU,GAAGrB,GAAG,CAACiB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAtB;EAEA,MAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACoB,UAAD,CAAjC;;EAEA,IAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA4B;IAC1B,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBP,QAA/B;IACA,MAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACF,MAAM1B,MAAM,CAACmB,UAAD,EAAa;QACvBI,WADuB;QAEvBC,KAFuB;QAGvBC,SAHuB;QAIvB,GAAGP;MAJoB,CAAb,CAAZ;IAMD,CAPD,CAOE,OAAOS,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAK,CAACG,OAA7C;IACD;EACF;;EAED,OAAOX,UAAP;AACD,CA3BM;AA6BP,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAMpC,8BAA8B,CAACgB,IAAD,EAAOY,KAAP,EAAcQ,QAAd,CAA3C;AACD,CAJM;AAMP,OAAO,MAAMC,kCAAkC,GAAG,OAAOT,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAME,0BAA0B,CAACtB,IAAD,EAAOY,KAAP,EAAcQ,QAAd,CAAvC;AACD,CAJM,C,CAMP;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}